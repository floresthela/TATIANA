
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'ADDITION AND ARC BACK CHAR CIRCLE CLOSEBRACES CLOSEBRACKET CLOSEPAREN COLOR_STAR COMMA CTECHAR CTEFLOAT CTEINT DIVISION ELSE ELSEIF EQUALS FLOAT FOR FUN GO GREATER HAND_DOWN HAND_UP HIDE_STAR ID IF INT ISEQUAL LEFT LESS MULTIPLICATION NOTEQUAL OPENBRACES OPENBRACKET OPENPAREN OR PRINT PROGRAM READ RECTANGLE REPEAT RETURN RIGHT SEMICOLON SETXY SHOW_STAR SIMPLEQUOTES SIZE_STAR SQUARE SUBSTRACTION TRIANGLE TWODOTS VARS VOID WHILE\n    program : PROGRAM ID SEMICOLON declara_vars program2 star\n    \n    program_vars : vars program_vars\n            | empty\n    \n    program2 : function program2\n            | empty\n    \n    star : MULTIPLICATION OPENBRACES declara_vars star1 CLOSEBRACES\n    \n    star1 : stmt star1\n        | empty\n    \n    declara_vars : vars declara_vars\n          | empty\n    \n    loop : while\n        | for\n    \n    stmt : assignment\n        | condition\n        | print\n        | loop\n        | read\n        | graphstmt\n        | graphr\n        | funCall\n        | return\n    \n    function : FUN function1 ID function2 inicia_fun declara_vars function4 termina_fun\n    \n    function1 : type\n              | VOID\n    \n    inicia_fun : OPENBRACES\n    \n    termina_fun : CLOSEBRACES\n    \n    function2 : OPENPAREN function3 CLOSEPAREN\n    \n    function3 : type ID function5\n              | empty\n    \n    function4 : stmt function4\n              | empty\n    \n    function5 : COMMA type ID function3\n    \n    fun_vars : vars fun_vars\n              | empty\n    \n    vars : type ID vars1 SEMICOLON\n    \n    vars1 : equals exp\n        | OPENBRACKET CTEINT CLOSEBRACKET vars3\n        | empty\n    \n    vars3 : OPENBRACKET CTEINT CLOSEBRACKET\n        | empty\n    \n    type : INT\n         | FLOAT\n         | CHAR\n    \n    print : PRINT OPENPAREN exp CLOSEPAREN SEMICOLON\n    \n    read : READ OPENPAREN ID read1 CLOSEPAREN SEMICOLON\n    \n    read1 : OPENBRACKET exp CLOSEBRACKET OPENBRACKET exp CLOSEBRACKET\n              | OPENBRACKET exp CLOSEBRACKET\n              | empty\n    \n    equals : EQUALS\n    \n    assignment : ID assignment1 equals assignment3 SEMICOLON\n    \n    assignment1 : assignment2\n                | assignment2 assignment1\n                | empty\n    \n    assignment2 : OPENBRACKET exp CLOSEBRACKET\n    \n    assignment3 : exp\n                | read\n    \n    vcte : cte\n        | ID vcte1\n        | funCall\n    \n    vcte1 : OPENBRACKET exp CLOSEBRACKET vcte3\n          | empty\n    \n    vcte3 : OPENBRACKET exp CLOSEBRACKET\n        | empty\n\n    \n    cte : CTEINT\n        | CTEFLOAT\n        | CTECHAR\n    \n    return : RETURN return1 SEMICOLON\n    \n    return1 : vcte\n            | exp\n    \n    expression : exp expression1\n    \n    expression1 : loper exp\n             | empty\n    \n    loper : GREATER\n          | LESS\n          | NOTEQUAL\n          | ISEQUAL\n    \n    logical : expression logical1 expression\n    \n    logical1 : OR\n             | AND\n    \n    condition : IF head body condition1\n    \n    condition1 : ELSEIF head body condition1\n               | ELSE body\n               | empty\n    \n    head : OPENPAREN head1 CLOSEPAREN\n    \n    head1 : expression\n          | logical\n    \n    body : OPENBRACES body1 CLOSEBRACES\n    \n    body1 : stmt body1\n          | empty\n    \n    for : FOR OPENPAREN ID TWODOTS exp CLOSEPAREN body\n    \n    while : WHILE  head body\n    \n    funCall : ID OPENPAREN funCall2 CLOSEPAREN SEMICOLON\n    \n    funCall2 : exp funCall3\n             | empty\n    \n    funCall3 : COMMA exp funCall2\n             | empty\n    \n    laRegla : OPENPAREN exp COMMA exp CLOSEPAREN\n    \n    laRegla2 : OPENPAREN exp CLOSEPAREN\n    \n    graphstmt : graphfig\n             | graphview\n             | graphmove\n    \n    graphfig : graphfig1 SEMICOLON\n    \n    graphfig1 : CIRCLE laRegla2\n            | SQUARE laRegla2\n            | TRIANGLE laRegla\n            | RECTANGLE laRegla\n    \n    graphmove :  graphmove1  SEMICOLON\n    \n    graphmove1 : HAND_DOWN\n              | HAND_UP\n              | graphmove2\n    \n    graphmove2 : GO laRegla2\n              | LEFT laRegla2\n              | RIGHT laRegla2\n              | BACK laRegla2\n              | ARC laRegla\n    \n    graphr : REPEAT exp OPENBRACES graphstmt graphr1 CLOSEBRACES\n    \n    graphr1 : graphstmt graphr1\n           | empty\n    \n    graphview : graphview1 SEMICOLON\n    \n    graphview1 : HIDE_STAR\n              | SHOW_STAR\n              | graphview2 exp\n    \n    graphview2 : SETXY graphview3\n              | COLOR_STAR\n              | SIZE_STAR\n    \n    graphview3 : exp COMMA\n              | laRegla\n    \n    exp : term exp1\n    \n    exp1 : ADDITION exp\n         | SUBSTRACTION exp\n         | empty\n    \n    openP : OPENPAREN\n    \n    closeP : CLOSEPAREN\n    \n    factor : vcte\n           | factor1\n    \n    factor1 : factor2 vcte\n            | openP expression closeP\n    \n    factor2 : ADDITION\n            | SUBSTRACTION\n    \n    term : factor term1\n    \n    term1 : MULTIPLICATION term\n          | DIVISION term\n          | empty\n    empty :'
    
_lr_action_items = {'PROGRAM':([0,],[2,]),'$end}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'declara_vars':([4,6,29,114,],[5,16,49,174,]),'vars':([4,6,29,114,],[6,6,6,6,]),'empty':([4,5,6,13,17,29,33,34,38,49,51,61,66,67,69,80,114,124,142,174,181,187,188,193,202,207,221,231,250,255,257,],[7,14,7,14,27,7,55,59,63,70,118,125,131,138,70,143,7,180,143,203,210,219,222,230,203,125,222,252,252,118,219,]),'type':([4,6,15,29,51,114,205,255,],[8,8,22,8,117,8,238,117,]),'program2':([5,13,],[12,20,]),'function':([5,13,],[13,13,]),'star':([12,],[18,]),'function1':([15,],[21,]),'vars1':([17,],[24,]),'equals':([17,141,],[25,184,]),'exp':([25,41,53,54,61,62,89,90,102,106,130,144,146,147,159,162,168,179,184,207,208,224,229,232,234,266,],[32,66,119,120,124,126,149,152,164,166,182,186,66,192,198,199,199,207,213,124,240,66,249,253,254,268,]),'term':([25,41,53,54,57,58,61,62,89,90,102,106,130,144,146,147,159,162,168,179,184,207,208,224,229,232,234,266,],[33,33,33,33,121,122,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,]),'factor':([25,41,53,54,57,58,61,62,89,90,102,106,130,144,146,147,159,162,168,179,184,207,208,224,229,232,234,266,],[34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,]),'vcte':([25,40,41,53,54,57,58,61,62,89,90,102,106,130,144,146,147,159,162,168,179,184,207,208,224,229,232,234,266,],[35,64,35,35,35,35,35,35,35,35,151,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,]),'factor1':([25,41,53,54,57,58,61,62,89,90,102,106,130,144,146,147,159,162,168,179,184,207,208,224,229,232,234,266,],[36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,]),'cte':([25,40,41,53,54,57,58,61,62,89,90,102,106,130,144,146,147,159,162,168,179,184,207,208,224,229,232,234,266,],[37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,]),'funCall':([25,40,41,49,53,54,57,58,61,62,69,89,90,102,106,130,144,146,147,159,162,168,174,179,184,188,202,207,208,221,224,229,232,234,266,],[39,39,39,78,39,39,39,39,39,39,78,39,39,39,39,39,39,39,39,39,39,39,78,39,39,78,78,39,39,78,39,39,39,39,39,]),'factor2':([25,41,53,54,57,58,61,62,89,90,102,106,130,144,146,147,159,162,168,179,184,207,208,224,229,232,234,266,],[40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,]),'openP':([25,41,53,54,57,58,61,62,89,90,102,106,130,144,146,147,159,162,168,179,184,207,208,224,229,232,234,266,],[41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,]),'function2':([30,],[50,]),'exp1':([33,],[52,]),'term1':([34,],[56,]),'vcte1':([38,],[60,]),'expression':([41,146,224,],[65,190,246,]),'star1':([49,69,],[68,140,]),'stmt':([49,69,174,188,202,221,],[69,69,202,221,202,221,]),'assignment':([49,69,174,188,202,221,],[71,71,71,71,71,71,]),'condition':([49,69,174,188,202,221,],[72,72,72,72,72,72,]),'print':([49,69,174,188,202,221,],[73,73,73,73,73,73,]),'loop':([49,69,174,188,202,221,],[74,74,74,74,74,74,]),'read':([49,69,174,184,188,202,221,],[75,75,75,214,75,75,75,]),'graphstmt':([49,69,174,188,194,202,221,231,250,],[76,76,76,76,231,76,76,250,250,]),'graphr':([49,69,174,188,202,221,],[77,77,77,77,77,77,]),'return':([49,69,174,188,202,221,],[79,79,79,79,79,79,]),'while':([49,69,174,188,202,221,],[83,83,83,83,83,83,]),'for':([49,69,174,188,202,221,],[84,84,84,84,84,84,]),'graphfig':([49,69,174,188,194,202,221,231,250,],[86,86,86,86,86,86,86,86,86,]),'graphview':([49,69,174,188,194,202,221,231,250,],[87,87,87,87,87,87,87,87,87,]),'graphmove':([49,69,174,188,194,202,221,231,250,],[88,88,88,88,88,88,88,88,88,]),'graphfig1':([49,69,174,188,194,202,221,231,250,],[93,93,93,93,93,93,93,93,93,]),'graphview1':([49,69,174,188,194,202,221,231,250,],[94,94,94,94,94,94,94,94,94,]),'graphmove1':([49,69,174,188,194,202,221,231,250,],[95,95,95,95,95,95,95,95,95,]),'graphview2':([49,69,174,188,194,202,221,231,250,],[102,102,102,102,102,102,102,102,102,]),'graphmove2':([49,69,174,188,194,202,221,231,250,],[105,105,105,105,105,105,105,105,105,]),'inicia_fun':([50,],[114,]),'function3':([51,255,],[116,264,]),'funCall2':([61,207,],[123,239,]),'closeP':([65,],[127,]),'expression1':([66,],[129,]),'loper':([66,],[130,]),'vars3':([67,],[137,]),'assignment1':([80,142,],[141,185,]),'assignment2':([80,142,],[142,142,]),'head':([81,91,217,],[145,153,242,]),'return1':([90,],[150,]),'laRegla2':([96,97,109,110,111,112,],[158,160,169,170,171,172,]),'laRegla':([98,99,106,113,],[161,163,167,173,]),'graphview3':([106,],[165,]),'funCall3':([124,],[178,]),'body':([145,153,218,242,262,],[187,196,243,257,267,]),'head1':([146,],[189,]),'logical':([146,],[191,]),'function4':([174,202,],[201,237,]),'function5':([176,],[204,]),'vcte3':([181,],[209,]),'assignment3':([184,],[212,]),'condition1':([187,257,],[216,265,]),'body1':([188,221,],[220,245,]),'logical1':([190,],[224,]),'read1':([193,],[228,]),'termina_fun':([201,],[235,]),'graphr1':([231,250,],[251,260,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> PROGRAM ID SEMICOLON declara_vars program2 star','program',6,'p_program','parser.py',30),
  ('program_vars -> vars program_vars','program_vars',2,'p_program_vars','parser.py',47),
  ('program_vars -> empty','program_vars',1,'p_program_vars','parser.py',48),
  ('program2 -> function program2','program2',2,'p_program2','parser.py',57),
  ('program2 -> empty','program2',1,'p_program2','parser.py',58),
  ('star -> MULTIPLICATION OPENBRACES declara_vars star1 CLOSEBRACES','star',5,'p_star','parser.py',64),
  ('star1 -> stmt star1','star1',2,'p_star1','parser.py',75),
  ('star1 -> empty','star1',1,'p_star1','parser.py',76),
  ('declara_vars -> vars declara_vars','declara_vars',2,'p_declara_vars','parser.py',82),
  ('declara_vars -> empty','declara_vars',1,'p_declara_vars','parser.py',83),
  ('loop -> while','loop',1,'p_loop','parser.py',93),
  ('loop -> for','loop',1,'p_loop','parser.py',94),
  ('stmt -> assignment','stmt',1,'p_stmt','parser.py',101),
  ('stmt -> condition','stmt',1,'p_stmt','parser.py',102),
  ('stmt -> print','stmt',1,'p_stmt','parser.py',103),
  ('stmt -> loop','stmt',1,'p_stmt','parser.py',104),
  ('stmt -> read','stmt',1,'p_stmt','parser.py',105),
  ('stmt -> graphstmt','stmt',1,'p_stmt','parser.py',106),
  ('stmt -> graphr','stmt',1,'p_stmt','parser.py',107),
  ('stmt -> funCall','stmt',1,'p_stmt','parser.py',108),
  ('stmt -> return','stmt',1,'p_stmt','parser.py',109),
  ('function -> FUN function1 ID function2 inicia_fun declara_vars function4 termina_fun','function',8,'p_function','parser.py',115),
  ('function1 -> type','function1',1,'p_function1','parser.py',122),
  ('function1 -> VOID','function1',1,'p_function1','parser.py',123),
  ('inicia_fun -> OPENBRACES','inicia_fun',1,'p_inicia_fun','parser.py',130),
  ('termina_fun -> CLOSEBRACES','termina_fun',1,'p_termina_fun','parser.py',136),
  ('function2 -> OPENPAREN function3 CLOSEPAREN','function2',3,'p_function2','parser.py',141),
  ('function3 -> type ID function5','function3',3,'p_function3','parser.py',147),
  ('function3 -> empty','function3',1,'p_function3','parser.py',148),
  ('function4 -> stmt function4','function4',2,'p_function4','parser.py',154),
  ('function4 -> empty','function4',1,'p_function4','parser.py',155),
  ('function5 -> COMMA type ID function3','function5',4,'p_function5','parser.py',161),
  ('fun_vars -> vars fun_vars','fun_vars',2,'p_fun_vars','parser.py',167),
  ('fun_vars -> empty','fun_vars',1,'p_fun_vars','parser.py',168),
  ('vars -> type ID vars1 SEMICOLON','vars',4,'p_vars','parser.py',184),
  ('vars1 -> equals exp','vars1',2,'p_vars1','parser.py',198),
  ('vars1 -> OPENBRACKET CTEINT CLOSEBRACKET vars3','vars1',4,'p_vars1','parser.py',199),
  ('vars1 -> empty','vars1',1,'p_vars1','parser.py',200),
  ('vars3 -> OPENBRACKET CTEINT CLOSEBRACKET','vars3',3,'p_vars3','parser.py',222),
  ('vars3 -> empty','vars3',1,'p_vars3','parser.py',223),
  ('type -> INT','type',1,'p_type','parser.py',230),
  ('type -> FLOAT','type',1,'p_type','parser.py',231),
  ('type -> CHAR','type',1,'p_type','parser.py',232),
  ('print -> PRINT OPENPAREN exp CLOSEPAREN SEMICOLON','print',5,'p_print','parser.py',240),
  ('read -> READ OPENPAREN ID read1 CLOSEPAREN SEMICOLON','read',6,'p_read','parser.py',246),
  ('read1 -> OPENBRACKET exp CLOSEBRACKET OPENBRACKET exp CLOSEBRACKET','read1',6,'p_read1','parser.py',253),
  ('read1 -> OPENBRACKET exp CLOSEBRACKET','read1',3,'p_read1','parser.py',254),
  ('read1 -> empty','read1',1,'p_read1','parser.py',255),
  ('equals -> EQUALS','equals',1,'p_equals','parser.py',260),
  ('assignment -> ID assignment1 equals assignment3 SEMICOLON','assignment',5,'p_assignment','parser.py',269),
  ('assignment1 -> assignment2','assignment1',1,'p_assignment1','parser.py',282),
  ('assignment1 -> assignment2 assignment1','assignment1',2,'p_assignment1','parser.py',283),
  ('assignment1 -> empty','assignment1',1,'p_assignment1','parser.py',284),
  ('assignment2 -> OPENBRACKET exp CLOSEBRACKET','assignment2',3,'p_assignment2','parser.py',290),
  ('assignment3 -> exp','assignment3',1,'p_assignment3','parser.py',296),
  ('assignment3 -> read','assignment3',1,'p_assignment3','parser.py',297),
  ('vcte -> cte','vcte',1,'p_vcte','parser.py',305),
  ('vcte -> ID vcte1','vcte',2,'p_vcte','parser.py',306),
  ('vcte -> funCall','vcte',1,'p_vcte','parser.py',307),
  ('vcte1 -> OPENBRACKET exp CLOSEBRACKET vcte3','vcte1',4,'p_vcte1','parser.py',319),
  ('vcte1 -> empty','vcte1',1,'p_vcte1','parser.py',320),
  ('vcte3 -> OPENBRACKET exp CLOSEBRACKET','vcte3',3,'p_vcte3','parser.py',326),
  ('vcte3 -> empty','vcte3',1,'p_vcte3','parser.py',327),
  ('cte -> CTEINT','cte',1,'p_cte','parser.py',336),
  ('cte -> CTEFLOAT','cte',1,'p_cte','parser.py',337),
  ('cte -> CTECHAR','cte',1,'p_cte','parser.py',338),
  ('return -> RETURN return1 SEMICOLON','return',3,'p_return','parser.py',347),
  ('return1 -> vcte','return1',1,'p_return1','parser.py',353),
  ('return1 -> exp','return1',1,'p_return1','parser.py',354),
  ('expression -> exp expression1','expression',2,'p_expression','parser.py',362),
  ('expression1 -> loper exp','expression1',2,'p_expression1','parser.py',368),
  ('expression1 -> empty','expression1',1,'p_expression1','parser.py',369),
  ('loper -> GREATER','loper',1,'p_loper','parser.py',376),
  ('loper -> LESS','loper',1,'p_loper','parser.py',377),
  ('loper -> NOTEQUAL','loper',1,'p_loper','parser.py',378),
  ('loper -> ISEQUAL','loper',1,'p_loper','parser.py',379),
  ('logical -> expression logical1 expression','logical',3,'p_logical','parser.py',389),
  ('logical1 -> OR','logical1',1,'p_logical1','parser.py',395),
  ('logical1 -> AND','logical1',1,'p_logical1','parser.py',396),
  ('condition -> IF head body condition1','condition',4,'p_condition','parser.py',403),
  ('condition1 -> ELSEIF head body condition1','condition1',4,'p_condition1','parser.py',409),
  ('condition1 -> ELSE body','condition1',2,'p_condition1','parser.py',410),
  ('condition1 -> empty','condition1',1,'p_condition1','parser.py',411),
  ('head -> OPENPAREN head1 CLOSEPAREN','head',3,'p_head','parser.py',418),
  ('head1 -> expression','head1',1,'p_head1','parser.py',424),
  ('head1 -> logical','head1',1,'p_head1','parser.py',425),
  ('body -> OPENBRACES body1 CLOSEBRACES','body',3,'p_body','parser.py',433),
  ('body1 -> stmt body1','body1',2,'p_body1','parser.py',439),
  ('body1 -> empty','body1',1,'p_body1','parser.py',440),
  ('for -> FOR OPENPAREN ID TWODOTS exp CLOSEPAREN body','for',7,'p_for','parser.py',447),
  ('while -> WHILE head body','while',3,'p_while','parser.py',454),
  ('funCall -> ID OPENPAREN funCall2 CLOSEPAREN SEMICOLON','funCall',5,'p_funCall','parser.py',461),
  ('funCall2 -> exp funCall3','funCall2',2,'p_funCall2','parser.py',467),
  ('funCall2 -> empty','funCall2',1,'p_funCall2','parser.py',468),
  ('funCall3 -> COMMA exp funCall2','funCall3',3,'p_funCall3','parser.py',474),
  ('funCall3 -> empty','funCall3',1,'p_funCall3','parser.py',475),
  ('laRegla -> OPENPAREN exp COMMA exp CLOSEPAREN','laRegla',5,'p_laRegla','parser.py',481),
  ('laRegla2 -> OPENPAREN exp CLOSEPAREN','laRegla2',3,'p_laRegla2','parser.py',487),
  ('graphstmt -> graphfig','graphstmt',1,'p_graphstmt','parser.py',494),
  ('graphstmt -> graphview','graphstmt',1,'p_graphstmt','parser.py',495),
  ('graphstmt -> graphmove','graphstmt',1,'p_graphstmt','parser.py',496),
  ('graphfig -> graphfig1 SEMICOLON','graphfig',2,'p_graphfig','parser.py',504),
  ('graphfig1 -> CIRCLE laRegla2','graphfig1',2,'p_graphfig1','parser.py',510),
  ('graphfig1 -> SQUARE laRegla2','graphfig1',2,'p_graphfig1','parser.py',511),
  ('graphfig1 -> TRIANGLE laRegla','graphfig1',2,'p_graphfig1','parser.py',512),
  ('graphfig1 -> RECTANGLE laRegla','graphfig1',2,'p_graphfig1','parser.py',513),
  ('graphmove -> graphmove1 SEMICOLON','graphmove',2,'p_graphmove','parser.py',521),
  ('graphmove1 -> HAND_DOWN','graphmove1',1,'p_graphmove1','parser.py',527),
  ('graphmove1 -> HAND_UP','graphmove1',1,'p_graphmove1','parser.py',528),
  ('graphmove1 -> graphmove2','graphmove1',1,'p_graphmove1','parser.py',529),
  ('graphmove2 -> GO laRegla2','graphmove2',2,'p_graphmove2','parser.py',535),
  ('graphmove2 -> LEFT laRegla2','graphmove2',2,'p_graphmove2','parser.py',536),
  ('graphmove2 -> RIGHT laRegla2','graphmove2',2,'p_graphmove2','parser.py',537),
  ('graphmove2 -> BACK laRegla2','graphmove2',2,'p_graphmove2','parser.py',538),
  ('graphmove2 -> ARC laRegla','graphmove2',2,'p_graphmove2','parser.py',539),
  ('graphr -> REPEAT exp OPENBRACES graphstmt graphr1 CLOSEBRACES','graphr',6,'p_graphr','parser.py',547),
  ('graphr1 -> graphstmt graphr1','graphr1',2,'p_graphr1','parser.py',553),
  ('graphr1 -> empty','graphr1',1,'p_graphr1','parser.py',554),
  ('graphview -> graphview1 SEMICOLON','graphview',2,'p_graphview','parser.py',562),
  ('graphview1 -> HIDE_STAR','graphview1',1,'p_graphview1','parser.py',568),
  ('graphview1 -> SHOW_STAR','graphview1',1,'p_graphview1','parser.py',569),
  ('graphview1 -> graphview2 exp','graphview1',2,'p_graphview1','parser.py',570),
  ('graphview2 -> SETXY graphview3','graphview2',2,'p_graphview2','parser.py',576),
  ('graphview2 -> COLOR_STAR','graphview2',1,'p_graphview2','parser.py',577),
  ('graphview2 -> SIZE_STAR','graphview2',1,'p_graphview2','parser.py',578),
  ('graphview3 -> exp COMMA','graphview3',2,'p_graphview3','parser.py',584),
  ('graphview3 -> laRegla','graphview3',1,'p_graphview3','parser.py',585),
  ('exp -> term exp1','exp',2,'p_exp','parser.py',593),
  ('exp1 -> ADDITION exp','exp1',2,'p_exp1','parser.py',616),
  ('exp1 -> SUBSTRACTION exp','exp1',2,'p_exp1','parser.py',617),
  ('exp1 -> empty','exp1',1,'p_exp1','parser.py',618),
  ('openP -> OPENPAREN','openP',1,'p_openP','parser.py',627),
  ('closeP -> CLOSEPAREN','closeP',1,'p_closeP','parser.py',635),
  ('factor -> vcte','factor',1,'p_factor','parser.py',645),
  ('factor -> factor1','factor',1,'p_factor','parser.py',646),
  ('factor1 -> factor2 vcte','factor1',2,'p_factor1','parser.py',654),
  ('factor1 -> openP expression closeP','factor1',3,'p_factor1','parser.py',655),
  ('factor2 -> ADDITION','factor2',1,'p_factor2','parser.py',661),
  ('factor2 -> SUBSTRACTION','factor2',1,'p_factor2','parser.py',662),
  ('term -> factor term1','term',2,'p_term','parser.py',674),
  ('term1 -> MULTIPLICATION term','term1',2,'p_term1','parser.py',680),
  ('term1 -> DIVISION term','term1',2,'p_term1','parser.py',681),
  ('term1 -> empty','term1',1,'p_term1','parser.py',682),
  ('empty -> <empty>','empty',0,'p_empty','parser.py',691),
]
