
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'ADDITION AND ARC BACK CHAR CIRCLE CLOSEBRACES CLOSEBRACKET CLOSEPAREN COLOR_STAR COMMA CTECHAR CTEFLOAT CTEINT DIVISION ELSE ELSEIF EQUALS FLOAT FOR FUN GO GREATER HAND_DOWN HAND_UP HIDE_STAR ID IF INT ISEQUAL LEFT LESS MULTIPLICATION NOTEQUAL OPENBRACES OPENBRACKET OPENPAREN OR PRINT PROGRAM READ RECTANGLE REPEAT RETURN RIGHT SEMICOLON SETXY SHOW_STAR SIMPLEQUOTES SIZE_STAR SQUARE SUBSTRACTION TRIANGLE TWODOTS VARS VOID WHILE\n    program : PROGRAM ID SEMICOLON declara_vars program2 star\n    \n    program_vars : vars program_vars\n            | empty\n    \n    program2 : function program2\n            | empty\n    \n    star : starI declara_vars star1 CLOSEBRACES\n    \n    starI : MULTIPLICATION OPENBRACES\n    \n    star1 : stmt star1\n        | empty\n    \n    declara_vars : vars declara_vars\n          | empty\n    \n    loop : while\n        | for\n    \n    stmt : assignment\n        | condition\n        | print\n        | loop\n        | read\n        | graphstmt\n        | graphr\n        | funCall SEMICOLON\n        | return\n    \n    functionI : type ID\n              | VOID ID\n    \n    function : FUN functionI function2 inicia_fun declara_vars function4 termina_fun\n    \n    function1 : type\n              | VOID\n    \n    inicia_fun : OPENBRACES\n    \n    termina_fun : CLOSEBRACES\n    \n    function2 : OPENPAREN function3 CLOSEPAREN\n    \n    function3 : type ID function5\n              | empty\n    \n    function4 : stmt function4\n              | empty\n    \n    function5 : COMMA type ID function3\n    \n    fun_vars : vars fun_vars\n              | empty\n    \n    vars : type ID vars1 equals exp SEMICOLON\n         | type ID vars1 SEMICOLON\n    \n    vars1 : OPENBRACKET CTEINT CLOSEBRACKET vars3\n        | empty\n    \n    vars3 : OPENBRACKET CTEINT CLOSEBRACKET\n        | empty\n    \n    type : INT\n         | FLOAT\n         | CHAR\n    \n    print : PRINT OPENPAREN expression CLOSEPAREN SEMICOLON\n    \n    read : READ OPENPAREN id read1 CLOSEPAREN SEMICOLON\n    \n    read1 : OPENBRACKET exp CLOSEBRACKET OPENBRACKET exp CLOSEBRACKET\n              | OPENBRACKET exp CLOSEBRACKET\n              | empty\n    \n    equals : EQUALS\n    \n    id : ID\n    \n    assignment : id assignment1 equals assignment3 SEMICOLON\n    \n    assignment1 : assignment2\n                | assignment2 assignment1\n                | empty\n    \n    assignment2 : OPENBRACKET exp CLOSEBRACKET\n    \n    assignment3 : exp\n                | read\n    \n    vcte : cte_int\n         | cte_float\n         | cte_char\n         | id vcte1\n         | funCall\n    \n    vcte1 : OPENBRACKET exp CLOSEBRACKET vcte3\n          | empty\n    \n    vcte3 : OPENBRACKET exp CLOSEBRACKET\n        | empty\n\n    \n    cte_int : CTEINT\n    \n    cte_float : CTEFLOAT\n    \n    cte_char : CTECHAR\n    \n    return : RETURN return1 SEMICOLON\n    \n    return1 : vcte\n            | exp\n    \n    expression : exp expression1\n    \n    expression1 : loper exp\n             | empty\n    \n    loper : GREATER\n          | LESS\n          | NOTEQUAL\n          | ISEQUAL\n    \n    logical : expression logical1 expression\n    \n    logical1 : OR\n             | AND\n    \n    condition : IF head_cond body condition1\n    \n    condition1 : elseif head_cond body condition1\n               | else body\n               | empty\n    \n    elseif : ELSEIF\n    \n    else : ELSE\n    \n    head : OPENPAREN head1 CLOSEPAREN\n    \n    head_cond : OPENPAREN head1 close_condition\n    \n    head1 : expression\n          | logical\n    \n    body : OPENBRACES body1 CLOSEBRACES\n    \n    close_condition : CLOSEPAREN\n    \n    body1 : stmt body1\n          | empty\n    \n    for : FOR OPENPAREN ID TWODOTS exp CLOSEPAREN body\n    \n    while : while1 body\n    \n    while1 : while_w OPENPAREN expression CLOSEPAREN\n    \n    while_w : WHILE\n    \n    funCall : ID OPENPAREN funCall2 CLOSEPAREN\n    \n    funCall2 : exp funCall3\n             | empty\n    \n    funCall3 : COMMA exp funCall2\n             | empty\n    \n    laRegla : OPENPAREN exp COMMA exp CLOSEPAREN\n    \n    laRegla2 : OPENPAREN exp CLOSEPAREN\n    \n    graphstmt : graphfig\n             | graphview\n             | graphmove\n    \n    graphfig : graphfig1 SEMICOLON\n    \n    graphfig1 : CIRCLE laRegla2\n            | SQUARE laRegla2\n            | TRIANGLE laRegla\n            | RECTANGLE laRegla\n    \n    graphmove :  graphmove1  SEMICOLON\n    \n    graphmove1 : HAND_DOWN\n              | HAND_UP\n              | graphmove2\n    \n    graphmove2 : GO laRegla2\n              | LEFT laRegla2\n              | RIGHT laRegla2\n              | BACK laRegla2\n              | ARC laRegla\n    \n    graphr : REPEAT exp OPENBRACES graphstmt graphr1 CLOSEBRACES\n    \n    graphr1 : graphstmt graphr1\n           | empty\n    \n    graphview : graphview1 SEMICOLON\n    \n    graphview1 : HIDE_STAR\n              | SHOW_STAR\n              | graphview2 exp\n    \n    graphview2 : SETXY graphview3\n              | COLOR_STAR\n              | SIZE_STAR\n    \n    graphview3 : exp COMMA\n              | laRegla\n    \n    exp : term exp1\n    \n    exp1 : ADDITION exp\n         | SUBSTRACTION exp\n         | empty\n    \n    openP : OPENPAREN\n    \n    closeP : CLOSEPAREN\n    \n    factor : vcte\n           | factor1\n    \n    factor1 : factor2 vcte\n            | openP expression closeP\n    \n    factor2 : ADDITION\n            | SUBSTRACTION\n    \n    term : factor term1\n    \n    term1 : MULTIPLICATION term\n          | DIVISION term\n          | empty\n    empty :'
    
_lr_action_items = {'PROGRAM':([0,],[2,]),'$end':([1,18,112,],[0,-1,-6,]),'ID':([2,6,7,8,9,10,11,16,19,23,24,28,29,34,35,36,39,41,42,43,44,45,46,47,49,53,54,56,57,58,59,61,74,79,80,81,87,88,90,92,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,114,118,120,121,122,124,128,129,130,131,132,133,134,136,139,142,144,145,151,154,155,156,157,158,159,160,161,162,163,164,165,166,172,175,186,188,194,196,200,201,202,203,205,206,208,210,211,212,213,219,222,227,228,229,232,235,237,239,241,244,248,249,252,254,256,262,266,267,268,269,270,273,276,279,280,281,282,],[3,-156,-11,17,-44,-45,-46,-10,-156,32,33,60,-7,92,-39,-52,60,-14,-15,-16,-17,-18,-19,-20,-22,-12,-13,-111,-112,-113,92,92,92,92,-136,-137,-156,-28,153,-53,-156,-156,-146,-147,-61,-62,-63,-156,-65,92,92,-70,-71,-72,-144,-150,-151,-21,92,92,92,181,92,-101,60,190,-114,-131,-119,92,92,92,-135,-139,92,60,-38,-140,92,92,-143,-152,92,92,-155,-64,92,-67,-148,92,-156,-73,60,-138,60,-141,-142,-153,-154,-149,-145,92,-79,-80,-81,-82,-86,-89,92,-84,-85,92,-104,92,-96,92,92,265,-156,-54,-88,-47,92,92,-66,-69,-156,-48,-128,-109,-87,92,-100,-68,]),'SEMICOLON':([3,17,25,27,48,64,65,66,72,73,75,76,77,92,93,94,95,96,97,98,99,100,101,102,105,106,107,111,125,126,127,135,137,138,140,141,146,147,148,149,150,155,158,159,162,163,165,166,170,171,200,201,202,203,205,206,215,216,217,230,235,243,249,251,257,267,268,270,276,282,],[4,-156,35,-41,114,131,132,133,-132,-133,-120,-121,-122,-53,154,-156,-156,-146,-147,-61,-62,-63,-156,-65,-70,-71,-72,-156,186,-74,-75,-115,-116,-117,-118,-134,-123,-124,-125,-126,-127,-140,-143,-152,-155,-64,-67,-148,-40,-43,-141,-142,-153,-154,-149,-145,252,-59,-60,256,-104,-110,-156,-42,270,-66,-69,-48,-109,-68,]),'FUN':([4,5,6,7,13,16,35,154,245,246,],[-156,15,-156,-11,15,-10,-39,-38,-25,-29,]),'MULTIPLICATION':([4,5,6,7,12,13,14,16,21,35,92,95,96,97,98,99,100,101,102,105,106,107,126,154,163,165,166,205,206,235,245,246,249,267,268,282,],[-156,-156,-156,-11,20,-156,-5,-10,-4,-39,-53,160,-146,-147,-61,-62,-63,-156,-65,-70,-71,-72,-146,-38,-64,-67,-148,-149,-145,-104,-25,-29,-156,-66,-69,-68,]),'INT':([4,6,15,19,29,31,35,87,88,154,199,265,],[9,9,9,9,-7,9,-39,9,-28,-38,9,9,]),'FLOAT':([4,6,15,19,29,31,35,87,88,154,199,265,],[10,10,10,10,-7,10,-39,10,-28,-38,10,10,]),'CHAR':([4,6,15,19,29,31,35,87,88,154,199,265,],[11,11,11,11,-7,11,-39,11,-28,-38,11,11,]),'IF':([6,7,16,19,28,29,35,39,41,42,43,44,45,46,47,49,53,54,56,57,58,87,88,114,128,129,131,132,133,151,154,175,186,188,196,219,222,239,252,254,256,269,270,273,279,281,],[-156,-11,-10,-156,51,-7,-39,51,-14,-15,-16,-17,-18,-19,-20,-22,-12,-13,-111,-112,-113,-156,-28,-21,-101,51,-114,-131,-119,51,-38,-156,-73,51,51,-86,-89,-96,-54,-88,-47,-156,-48,-128,-87,-100,]),'PRINT':([6,7,16,19,28,29,35,39,41,42,43,44,45,46,47,49,53,54,56,57,58,87,88,114,128,129,131,132,133,151,154,175,186,188,196,219,222,239,252,254,256,269,270,273,279,281,],[-156,-11,-10,-156,52,-7,-39,52,-14,-15,-16,-17,-18,-19,-20,-22,-12,-13,-111,-112,-113,-156,-28,-21,-101,52,-114,-131,-119,52,-38,-156,-73,52,52,-86,-89,-96,-54,-88,-47,-156,-48,-128,-87,-100,]),'READ':([6,7,16,19,28,29,35,36,39,41,42,43,44,45,46,47,49,53,54,56,57,58,87,88,114,128,129,131,132,133,151,154,172,175,186,188,196,219,222,239,252,254,256,269,270,273,279,281,],[-156,-11,-10,-156,55,-7,-39,-52,55,-14,-15,-16,-17,-18,-19,-20,-22,-12,-13,-111,-112,-113,-156,-28,-21,-101,55,-114,-131,-119,55,-38,55,-156,-73,55,55,-86,-89,-96,-54,-88,-47,-156,-48,-128,-87,-100,]),'REPEAT':([6,7,16,19,28,29,35,39,41,42,43,44,45,46,47,49,53,54,56,57,58,87,88,114,128,129,131,132,133,151,154,175,186,188,196,219,222,239,252,254,256,269,270,273,279,281,],[-156,-11,-10,-156,59,-7,-39,59,-14,-15,-16,-17,-18,-19,-20,-22,-12,-13,-111,-112,-113,-156,-28,-21,-101,59,-114,-131,-119,59,-38,-156,-73,59,59,-86,-89,-96,-54,-88,-47,-156,-48,-128,-87,-100,]),'RETURN':([6,7,16,19,28,29,35,39,41,42,43,44,45,46,47,49,53,54,56,57,58,87,88,114,128,129,131,132,133,151,154,175,186,188,196,219,222,239,252,254,256,269,270,273,279,281,],[-156,-11,-10,-156,61,-7,-39,61,-14,-15,-16,-17,-18,-19,-20,-22,-12,-13,-111,-112,-113,-156,-28,-21,-101,61,-114,-131,-119,61,-38,-156,-73,61,61,-86,-89,-96,-54,-88,-47,-156,-48,-128,-87,-100,]),'FOR':([6,7,16,19,28,29,35,39,41,42,43,44,45,46,47,49,53,54,56,57,58,87,88,114,128,129,131,132,133,151,154,175,186,188,196,219,222,239,252,254,256,269,270,273,279,281,],[-156,-11,-10,-156,63,-7,-39,63,-14,-15,-16,-17,-18,-19,-20,-22,-12,-13,-111,-112,-113,-156,-28,-21,-101,63,-114,-131,-119,63,-38,-156,-73,63,63,-86,-89,-96,-54,-88,-47,-156,-48,-128,-87,-100,]),'CIRCLE':([6,7,16,19,28,29,35,39,41,42,43,44,45,46,47,49,53,54,56,57,58,87,88,114,128,129,131,132,133,151,154,175,182,186,188,196,219,222,234,239,252,254,256,259,269,270,273,279,281,],[-156,-11,-10,-156,68,-7,-39,68,-14,-15,-16,-17,-18,-19,-20,-22,-12,-13,-111,-112,-113,-156,-28,-21,-101,68,-114,-131,-119,68,-38,-156,68,-73,68,68,-86,-89,68,-96,-54,-88,-47,68,-156,-48,-128,-87,-100,]),'SQUARE':([6,7,16,19,28,29,35,39,41,42,43,44,45,46,47,49,53,54,56,57,58,87,88,114,128,129,131,132,133,151,154,175,182,186,188,196,219,222,234,239,252,254,256,259,269,270,273,279,281,],[-156,-11,-10,-156,69,-7,-39,69,-14,-15,-16,-17,-18,-19,-20,-22,-12,-13,-111,-112,-113,-156,-28,-21,-101,69,-114,-131,-119,69,-38,-156,69,-73,69,69,-86,-89,69,-96,-54,-88,-47,69,-156,-48,-128,-87,-100,]),'TRIANGLE':([6,7,16,19,28,29,35,39,41,42,43,44,45,46,47,49,53,54,56,57,58,87,88,114,128,129,131,132,133,151,154,175,182,186,188,196,219,222,234,239,252,254,256,259,269,270,273,279,281,],[-156,-11,-10,-156,70,-7,-39,70,-14,-15,-16,-17,-18,-19,-20,-22,-12,-13,-111,-112,-113,-156,-28,-21,-101,70,-114,-131,-119,70,-38,-156,70,-73,70,70,-86,-89,70,-96,-54,-88,-47,70,-156,-48,-128,-87,-100,]),'RECTANGLE':([6,7,16,19,28,29,35,39,41,42,43,44,45,46,47,49,53,54,56,57,58,87,88,114,128,129,131,132,133,151,154,175,182,186,188,196,219,222,234,239,252,254,256,259,269,270,273,279,281,],[-156,-11,-10,-156,71,-7,-39,71,-14,-15,-16,-17,-18,-19,-20,-22,-12,-13,-111,-112,-113,-156,-28,-21,-101,71,-114,-131,-119,71,-38,-156,71,-73,71,71,-86,-89,71,-96,-54,-88,-47,71,-156,-48,-128,-87,-100,]),'HIDE_STAR':([6,7,16,19,28,29,35,39,41,42,43,44,45,46,47,49,53,54,56,57,58,87,88,114,128,129,131,132,133,151,154,175,182,186,188,196,219,222,234,239,252,254,256,259,269,270,273,279,281,],[-156,-11,-10,-156,72,-7,-39,72,-14,-15,-16,-17,-18,-19,-20,-22,-12,-13,-111,-112,-113,-156,-28,-21,-101,72,-114,-131,-119,72,-38,-156,72,-73,72,72,-86,-89,72,-96,-54,-88,-47,72,-156,-48,-128,-87,-100,]),'SHOW_STAR':([6,7,16,19,28,29,35,39,41,42,43,44,45,46,47,49,53,54,56,57,58,87,88,114,128,129,131,132,133,151,154,175,182,186,188,196,219,222,234,239,252,254,256,259,269,270,273,279,281,],[-156,-11,-10,-156,73,-7,-39,73,-14,-15,-16,-17,-18,-19,-20,-22,-12,-13,-111,-112,-113,-156,-28,-21,-101,73,-114,-131,-119,73,-38,-156,73,-73,73,73,-86,-89,73,-96,-54,-88,-47,73,-156,-48,-128,-87,-100,]),'HAND_DOWN':([6,7,16,19,28,29,35,39,41,42,43,44,45,46,47,49,53,54,56,57,58,87,88,114,128,129,131,132,133,151,154,175,182,186,188,196,219,222,234,239,252,254,256,259,269,270,273,279,281,],[-156,-11,-10,-156,75,-7,-39,75,-14,-15,-16,-17,-18,-19,-20,-22,-12,-13,-111,-112,-113,-156,-28,-21,-101,75,-114,-131,-119,75,-38,-156,75,-73,75,75,-86,-89,75,-96,-54,-88,-47,75,-156,-48,-128,-87,-100,]),'HAND_UP':([6,7,16,19,28,29,35,39,41,42,43,44,45,46,47,49,53,54,56,57,58,87,88,114,128,129,131,132,133,151,154,175,182,186,188,196,219,222,234,239,252,254,256,259,269,270,273,279,281,],[-156,-11,-10,-156,76,-7,-39,76,-14,-15,-16,-17,-18,-19,-20,-22,-12,-13,-111,-112,-113,-156,-28,-21,-101,76,-114,-131,-119,76,-38,-156,76,-73,76,76,-86,-89,76,-96,-54,-88,-47,76,-156,-48,-128,-87,-100,]),'WHILE':([6,7,16,19,28,29,35,39,41,42,43,44,45,46,47,49,53,54,56,57,58,87,88,114,128,129,131,132,133,151,154,175,186,188,196,219,222,239,252,254,256,269,270,273,279,281,],[-156,-11,-10,-156,78,-7,-39,78,-14,-15,-16,-17,-18,-19,-20,-22,-12,-13,-111,-112,-113,-156,-28,-21,-101,78,-114,-131,-119,78,-38,-156,-73,78,78,-86,-89,-96,-54,-88,-47,-156,-48,-128,-87,-100,]),'SETXY':([6,7,16,19,28,29,35,39,41,42,43,44,45,46,47,49,53,54,56,57,58,87,88,114,128,129,131,132,133,151,154,175,182,186,188,196,219,222,234,239,252,254,256,259,269,270,273,279,281,],[-156,-11,-10,-156,79,-7,-39,79,-14,-15,-16,-17,-18,-19,-20,-22,-12,-13,-111,-112,-113,-156,-28,-21,-101,79,-114,-131,-119,79,-38,-156,79,-73,79,79,-86,-89,79,-96,-54,-88,-47,79,-156,-48,-128,-87,-100,]),'COLOR_STAR':([6,7,16,19,28,29,35,39,41,42,43,44,45,46,47,49,53,54,56,57,58,87,88,114,128,129,131,132,133,151,154,175,182,186,188,196,219,222,234,239,252,254,256,259,269,270,273,279,281,],[-156,-11,-10,-156,80,-7,-39,80,-14,-15,-16,-17,-18,-19,-20,-22,-12,-13,-111,-112,-113,-156,-28,-21,-101,80,-114,-131,-119,80,-38,-156,80,-73,80,80,-86,-89,80,-96,-54,-88,-47,80,-156,-48,-128,-87,-100,]),'SIZE_STAR':([6,7,16,19,28,29,35,39,41,42,43,44,45,46,47,49,53,54,56,57,58,87,88,114,128,129,131,132,133,151,154,175,182,186,188,196,219,222,234,239,252,254,256,259,269,270,273,279,281,],[-156,-11,-10,-156,81,-7,-39,81,-14,-15,-16,-17,-18,-19,-20,-22,-12,-13,-111,-112,-113,-156,-28,-21,-101,81,-114,-131,-119,81,-38,-156,81,-73,81,81,-86,-89,81,-96,-54,-88,-47,81,-156,-48,-128,-87,-100,]),'GO':([6,7,16,19,28,29,35,39,41,42,43,44,45,46,47,49,53,54,56,57,58,87,88,114,128,129,131,132,133,151,154,175,182,186,188,196,219,222,234,239,252,254,256,259,269,270,273,279,281,],[-156,-11,-10,-156,82,-7,-39,82,-14,-15,-16,-17,-18,-19,-20,-22,-12,-13,-111,-112,-113,-156,-28,-21,-101,82,-114,-131,-119,82,-38,-156,82,-73,82,82,-86,-89,82,-96,-54,-88,-47,82,-156,-48,-128,-87,-100,]),'LEFT':([6,7,16,19,28,29,35,39,41,42,43,44,45,46,47,49,53,54,56,57,58,87,88,114,128,129,131,132,133,151,154,175,182,186,188,196,219,222,234,239,252,254,256,259,269,270,273,279,281,],[-156,-11,-10,-156,83,-7,-39,83,-14,-15,-16,-17,-18,-19,-20,-22,-12,-13,-111,-112,-113,-156,-28,-21,-101,83,-114,-131,-119,83,-38,-156,83,-73,83,83,-86,-89,83,-96,-54,-88,-47,83,-156,-48,-128,-87,-100,]),'RIGHT':([6,7,16,19,28,29,35,39,41,42,43,44,45,46,47,49,53,54,56,57,58,87,88,114,128,129,131,132,133,151,154,175,182,186,188,196,219,222,234,239,252,254,256,259,269,270,273,279,281,],[-156,-11,-10,-156,84,-7,-39,84,-14,-15,-16,-17,-18,-19,-20,-22,-12,-13,-111,-112,-113,-156,-28,-21,-101,84,-114,-131,-119,84,-38,-156,84,-73,84,84,-86,-89,84,-96,-54,-88,-47,84,-156,-48,-128,-87,-100,]),'BACK':([6,7,16,19,28,29,35,39,41,42,43,44,45,46,47,49,53,54,56,57,58,87,88,114,128,129,131,132,133,151,154,175,182,186,188,196,219,222,234,239,252,254,256,259,269,270,273,279,281,],[-156,-11,-10,-156,85,-7,-39,85,-14,-15,-16,-17,-18,-19,-20,-22,-12,-13,-111,-112,-113,-156,-28,-21,-101,85,-114,-131,-119,85,-38,-156,85,-73,85,85,-86,-89,85,-96,-54,-88,-47,85,-156,-48,-128,-87,-100,]),'ARC':([6,7,16,19,28,29,35,39,41,42,43,44,45,46,47,49,53,54,56,57,58,87,88,114,128,129,131,132,133,151,154,175,182,186,188,196,219,222,234,239,252,254,256,259,269,270,273,279,281,],[-156,-11,-10,-156,86,-7,-39,86,-14,-15,-16,-17,-18,-19,-20,-22,-12,-13,-111,-112,-113,-156,-28,-21,-101,86,-114,-131,-119,86,-38,-156,86,-73,86,86,-86,-89,86,-96,-54,-88,-47,86,-156,-48,-128,-87,-100,]),'CLOSEBRACES':([6,7,16,19,28,29,35,38,39,40,41,42,43,44,45,46,47,49,53,54,56,57,58,87,88,113,114,128,129,131,132,133,151,154,175,186,187,188,189,195,196,197,219,222,234,239,240,247,252,254,256,259,260,261,269,270,272,273,279,281,],[-156,-11,-10,-156,-156,-7,-39,112,-156,-9,-14,-15,-16,-17,-18,-19,-20,-22,-12,-13,-111,-112,-113,-156,-28,-8,-21,-101,-156,-114,-131,-119,-156,-38,-156,-73,239,-156,-99,246,-156,-34,-86,-89,-156,-96,-98,-33,-54,-88,-47,-156,273,-130,-156,-48,-129,-128,-87,-100,]),'VOID':([15,],[24,]),'OPENBRACKET':([17,50,60,92,101,111,116,180,181,218,249,271,],[26,118,-53,-53,164,169,118,232,-53,-58,266,280,]),'EQUALS':([17,25,27,50,60,111,115,116,117,170,171,173,218,251,],[-156,36,-41,-156,-53,-156,36,-55,-57,-40,-43,-56,-58,-42,]),'OPENBRACES':([20,30,62,92,94,95,96,97,98,99,100,101,102,105,106,107,119,123,152,155,158,159,162,163,165,166,200,201,202,203,205,206,221,224,225,226,235,242,249,253,267,268,275,282,],[29,88,129,-53,-156,-156,-146,-147,-61,-62,-63,-156,-65,-70,-71,-72,129,182,-30,-140,-143,-152,-155,-64,-67,-148,-141,-142,-153,-154,-149,-145,129,-91,-93,-97,-104,-102,-156,129,-66,-69,129,-68,]),'OPENPAREN':([22,32,33,34,36,51,52,55,59,60,61,63,67,68,69,70,71,74,78,79,80,81,82,83,84,85,86,92,94,95,96,97,98,99,100,101,102,104,105,106,107,108,118,120,121,124,134,136,139,142,144,145,155,156,157,158,159,160,161,162,163,164,165,166,172,194,200,201,202,203,205,206,208,210,211,212,213,220,223,227,228,229,232,235,237,241,244,249,262,266,267,268,276,280,282,],[31,-23,-24,108,-52,120,121,122,108,124,108,130,134,136,136,139,139,108,-103,145,-136,-137,136,136,136,136,139,124,-156,-156,-146,-147,-61,-62,-63,-156,-65,108,-70,-71,-72,-144,108,108,108,108,108,108,108,-135,-139,108,-140,108,108,-143,-152,108,108,-155,-64,108,-67,-148,108,-138,-141,-142,-153,-154,-149,-145,108,-79,-80,-81,-82,120,-90,108,-84,-85,108,-104,108,108,108,-156,108,108,-66,-69,-109,108,-68,]),'CTEINT':([26,34,36,59,61,74,79,80,81,92,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,118,120,121,124,134,136,139,142,144,145,155,156,157,158,159,160,161,162,163,164,165,166,169,172,194,200,201,202,203,205,206,208,210,211,212,213,227,228,229,232,235,237,241,244,249,262,266,267,268,276,280,282,],[37,105,-52,105,105,105,105,-136,-137,-53,-156,-156,-146,-147,-61,-62,-63,-156,-65,105,105,-70,-71,-72,-144,-150,-151,105,105,105,105,105,105,105,-135,-139,105,-140,105,105,-143,-152,105,105,-155,-64,105,-67,-148,214,105,-138,-141,-142,-153,-154,-149,-145,105,-79,-80,-81,-82,105,-84,-85,105,-104,105,105,105,-156,105,105,-66,-69,-109,105,-68,]),'CLOSEPAREN':([31,89,91,92,94,95,96,97,98,99,100,101,102,105,106,107,124,155,158,159,162,163,165,166,167,168,176,177,178,179,180,181,183,184,185,191,192,198,200,201,202,203,205,206,207,209,231,233,235,236,238,249,250,255,262,263,264,265,267,268,271,274,277,282,284,],[-156,152,-32,-53,-156,-156,-146,-147,-61,-62,-63,-156,-65,-70,-71,-72,-156,-140,-143,-152,-155,-64,-67,-148,206,-156,226,-94,-95,230,-156,-53,235,-156,-106,242,243,-31,-141,-142,-153,-154,-149,-145,-76,-78,257,-51,-104,-105,-108,-156,-77,-83,-156,275,276,-156,-66,-69,-50,-107,-35,-68,-49,]),'CTEFLOAT':([34,36,59,61,74,79,80,81,92,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,118,120,121,124,134,136,139,142,144,145,155,156,157,158,159,160,161,162,163,164,165,166,172,194,200,201,202,203,205,206,208,210,211,212,213,227,228,229,232,235,237,241,244,249,262,266,267,268,276,280,282,],[106,-52,106,106,106,106,-136,-137,-53,-156,-156,-146,-147,-61,-62,-63,-156,-65,106,106,-70,-71,-72,-144,-150,-151,106,106,106,106,106,106,106,-135,-139,106,-140,106,106,-143,-152,106,106,-155,-64,106,-67,-148,106,-138,-141,-142,-153,-154,-149,-145,106,-79,-80,-81,-82,106,-84,-85,106,-104,106,106,106,-156,106,106,-66,-69,-109,106,-68,]),'CTECHAR':([34,36,59,61,74,79,80,81,92,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,118,120,121,124,134,136,139,142,144,145,155,156,157,158,159,160,161,162,163,164,165,166,172,194,200,201,202,203,205,206,208,210,211,212,213,227,228,229,232,235,237,241,244,249,262,266,267,268,276,280,282,],[107,-52,107,107,107,107,-136,-137,-53,-156,-156,-146,-147,-61,-62,-63,-156,-65,107,107,-70,-71,-72,-144,-150,-151,107,107,107,107,107,107,107,-135,-139,107,-140,107,107,-143,-152,107,107,-155,-64,107,-67,-148,107,-138,-141,-142,-153,-154,-149,-145,107,-79,-80,-81,-82,107,-84,-85,107,-104,107,107,107,-156,107,107,-66,-69,-109,107,-68,]),'ADDITION':([34,36,59,61,74,79,80,81,92,94,95,96,97,98,99,100,101,102,104,105,106,107,108,118,120,121,124,126,134,136,139,142,144,145,155,156,157,158,159,160,161,162,163,164,165,166,172,194,200,201,202,203,205,206,208,210,211,212,213,227,228,229,232,235,237,241,244,249,262,266,267,268,276,280,282,],[109,-52,109,109,109,109,-136,-137,-53,156,-156,-146,-147,-61,-62,-63,-156,-65,109,-70,-71,-72,-144,109,109,109,109,-146,109,109,109,-135,-139,109,-140,109,109,-143,-152,109,109,-155,-64,109,-67,-148,109,-138,-141,-142,-153,-154,-149,-145,109,-79,-80,-81,-82,109,-84,-85,109,-104,109,109,109,-156,109,109,-66,-69,-109,109,-68,]),'SUBSTRACTION':([34,36,59,61,74,79,80,81,92,94,95,96,97,98,99,100,101,102,104,105,106,107,108,118,120,121,124,126,134,136,139,142,144,145,155,156,157,158,159,160,161,162,163,164,165,166,172,194,200,201,202,203,205,206,208,210,211,212,213,227,228,229,232,235,237,241,244,249,262,266,267,268,276,280,282,],[110,-52,110,110,110,110,-136,-137,-53,157,-156,-146,-147,-61,-62,-63,-156,-65,110,-70,-71,-72,-144,110,110,110,110,-146,110,110,110,-135,-139,110,-140,110,110,-143,-152,110,110,-155,-64,110,-67,-148,110,-138,-141,-142,-153,-154,-149,-145,110,-79,-80,-81,-82,110,-84,-85,110,-104,110,110,110,-156,110,110,-66,-69,-109,110,-68,]),'CLOSEBRACKET':([37,92,94,95,96,97,98,99,100,101,102,105,106,107,155,158,159,162,163,165,166,174,200,201,202,203,204,205,206,214,235,249,258,267,268,278,282,283,],[111,-53,-156,-156,-146,-147,-61,-62,-63,-156,-65,-70,-71,-72,-140,-143,-152,-155,-64,-67,-148,218,-141,-142,-153,-154,249,-149,-145,251,-104,-156,271,-66,-69,282,-68,284,]),'DIVISION':([92,95,96,97,98,99,100,101,102,105,106,107,126,163,165,166,205,206,235,249,267,268,282,],[-53,161,-146,-147,-61,-62,-63,-156,-65,-70,-71,-72,-146,-64,-67,-148,-149,-145,-104,-156,-66,-69,-68,]),'COMMA':([92,94,95,96,97,98,99,100,101,102,105,106,107,143,153,155,158,159,162,163,165,166,184,193,200,201,202,203,205,206,235,249,267,268,282,],[-53,-156,-156,-146,-147,-61,-62,-63,-156,-65,-70,-71,-72,194,199,-140,-143,-152,-155,-64,-67,-148,237,244,-141,-142,-153,-154,-149,-145,-104,-156,-66,-69,-68,]),'GREATER':([92,94,95,96,97,98,99,100,101,102,105,106,107,155,158,159,162,163,165,166,168,200,201,202,203,205,206,235,249,267,268,282,],[-53,-156,-156,-146,-147,-61,-62,-63,-156,-65,-70,-71,-72,-140,-143,-152,-155,-64,-67,-148,210,-141,-142,-153,-154,-149,-145,-104,-156,-66,-69,-68,]),'LESS':([92,94,95,96,97,98,99,100,101,102,105,106,107,155,158,159,162,163,165,166,168,200,201,202,203,205,206,235,249,267,268,282,],[-53,-156,-156,-146,-147,-61,-62,-63,-156,-65,-70,-71,-72,-140,-143,-152,-155,-64,-67,-148,211,-141,-142,-153,-154,-149,-145,-104,-156,-66,-69,-68,]),'NOTEQUAL':([92,94,95,96,97,98,99,100,101,102,105,106,107,155,158,159,162,163,165,166,168,200,201,202,203,205,206,235,249,267,268,282,],[-53,-156,-156,-146,-147,-61,-62,-63,-156,-65,-70,-71,-72,-140,-143,-152,-155,-64,-67,-148,212,-141,-142,-153,-154,-149,-145,-104,-156,-66,-69,-68,]),'ISEQUAL':([92,94,95,96,97,98,99,100,101,102,105,106,107,155,158,159,162,163,165,166,168,200,201,202,203,205,206,235,249,267,268,282,],[-53,-156,-156,-146,-147,-61,-62,-63,-156,-65,-70,-71,-72,-140,-143,-152,-155,-64,-67,-148,213,-141,-142,-153,-154,-149,-145,-104,-156,-66,-69,-68,]),'OR':([92,94,95,96,97,98,99,100,101,102,105,106,107,155,158,159,162,163,165,166,168,177,200,201,202,203,205,206,207,209,235,249,250,267,268,282,],[-53,-156,-156,-146,-147,-61,-62,-63,-156,-65,-70,-71,-72,-140,-143,-152,-155,-64,-67,-148,-156,228,-141,-142,-153,-154,-149,-145,-76,-78,-104,-156,-77,-66,-69,-68,]),'AND':([92,94,95,96,97,98,99,100,101,102,105,106,107,155,158,159,162,163,165,166,168,177,200,201,202,203,205,206,207,209,235,249,250,267,268,282,],[-53,-156,-156,-146,-147,-61,-62,-63,-156,-65,-70,-71,-72,-140,-143,-152,-155,-64,-67,-148,-156,229,-141,-142,-153,-154,-149,-145,-76,-78,-104,-156,-77,-66,-69,-68,]),'ELSEIF':([175,239,269,],[223,-96,223,]),'ELSE':([175,239,269,],[224,-96,224,]),'TWODOTS':([190,],[241,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'declara_vars':([4,6,19,87,],[5,16,28,151,]),'vars':([4,6,19,87,],[6,6,6,6,]),'empty':([4,5,6,13,17,19,28,31,39,50,87,94,95,101,111,116,124,129,151,168,175,180,184,188,196,234,249,259,262,265,269,],[7,14,7,14,27,7,40,91,40,117,7,158,162,165,171,117,185,189,197,209,222,233,238,189,197,261,268,261,185,91,222,]),'type':([4,6,15,19,31,87,199,265,],[8,8,23,8,90,8,248,90,]),'program2':([5,13,],[12,21,]),'function':([5,13,],[13,13,]),'star':([12,],[18,]),'starI':([12,],[19,]),'functionI':([15,],[22,]),'vars1':([17,],[25,]),'function2':([22,],[30,]),'equals':([25,115,],[34,172,]),'star1':([28,39,],[38,113,]),'stmt':([28,39,129,151,188,196,],[39,39,188,196,188,196,]),'assignment':([28,39,129,151,188,196,],[41,41,41,41,41,41,]),'condition':([28,39,129,151,188,196,],[42,42,42,42,42,42,]),'print':([28,39,129,151,188,196,],[43,43,43,43,43,43,]),'loop':([28,39,129,151,188,196,],[44,44,44,44,44,44,]),'read':([28,39,129,151,172,188,196,],[45,45,45,45,217,45,45,]),'graphstmt':([28,39,129,151,182,188,196,234,259,],[46,46,46,46,234,46,46,259,259,]),'graphr':([28,39,129,151,188,196,],[47,47,47,47,47,47,]),'funCall':([28,34,39,59,61,74,79,103,104,118,120,121,124,129,134,136,139,145,151,156,157,160,161,164,172,188,196,208,227,232,237,241,244,262,266,280,],[48,102,48,102,102,102,102,102,102,102,102,102,102,48,102,102,102,102,48,102,102,102,102,102,102,48,48,102,102,102,102,102,102,102,102,102,]),'return':([28,39,129,151,188,196,],[49,49,49,49,49,49,]),'id':([28,34,39,59,61,74,79,103,104,118,120,121,122,124,129,134,136,139,145,151,156,157,160,161,164,172,188,196,208,227,232,237,241,244,262,266,280,],[50,101,50,101,101,101,101,101,101,101,101,101,180,101,50,101,101,101,101,50,101,101,101,101,101,101,50,50,101,101,101,101,101,101,101,101,101,]),'while':([28,39,129,151,188,196,],[53,53,53,53,53,53,]),'for':([28,39,129,151,188,196,],[54,54,54,54,54,54,]),'graphfig':([28,39,129,151,182,188,196,234,259,],[56,56,56,56,56,56,56,56,56,]),'graphview':([28,39,129,151,182,188,196,234,259,],[57,57,57,57,57,57,57,57,57,]),'graphmove':([28,39,129,151,182,188,196,234,259,],[58,58,58,58,58,58,58,58,58,]),'while1':([28,39,129,151,188,196,],[62,62,62,62,62,62,]),'graphfig1':([28,39,129,151,182,188,196,234,259,],[64,64,64,64,64,64,64,64,64,]),'graphview1':([28,39,129,151,182,188,196,234,259,],[65,65,65,65,65,65,65,65,65,]),'graphmove1':([28,39,129,151,182,188,196,234,259,],[66,66,66,66,66,66,66,66,66,]),'while_w':([28,39,129,151,188,196,],[67,67,67,67,67,67,]),'graphview2':([28,39,129,151,182,188,196,234,259,],[74,74,74,74,74,74,74,74,74,]),'graphmove2':([28,39,129,151,182,188,196,234,259,],[77,77,77,77,77,77,77,77,77,]),'inicia_fun':([30,],[87,]),'function3':([31,265,],[89,277,]),'exp':([34,59,61,74,79,104,118,120,121,124,134,136,139,145,156,157,164,172,208,227,232,237,241,244,262,266,280,],[93,123,127,141,143,168,174,168,168,184,168,192,193,193,200,201,204,216,250,168,258,262,263,264,184,278,283,]),'term':([34,59,61,74,79,104,118,120,121,124,134,136,139,145,156,157,160,161,164,172,208,227,232,237,241,244,262,266,280,],[94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,202,203,94,94,94,94,94,94,94,94,94,94,94,]),'factor':([34,59,61,74,79,104,118,120,121,124,134,136,139,145,156,157,160,161,164,172,208,227,232,237,241,244,262,266,280,],[95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,]),'vcte':([34,59,61,74,79,103,104,118,120,121,124,134,136,139,145,156,157,160,161,164,172,208,227,232,237,241,244,262,266,280,],[96,96,126,96,96,166,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,]),'factor1':([34,59,61,74,79,104,118,120,121,124,134,136,139,145,156,157,160,161,164,172,208,227,232,237,241,244,262,266,280,],[97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,]),'cte_int':([34,59,61,74,79,103,104,118,120,121,124,134,136,139,145,156,157,160,161,164,172,208,227,232,237,241,244,262,266,280,],[98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,]),'cte_float':([34,59,61,74,79,103,104,118,120,121,124,134,136,139,145,156,157,160,161,164,172,208,227,232,237,241,244,262,266,280,],[99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,]),'cte_char':([34,59,61,74,79,103,104,118,120,121,124,134,136,139,145,156,157,160,161,164,172,208,227,232,237,241,244,262,266,280,],[100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,]),'factor2':([34,59,61,74,79,104,118,120,121,124,134,136,139,145,156,157,160,161,164,172,208,227,232,237,241,244,262,266,280,],[103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,]),'openP':([34,59,61,74,79,104,118,120,121,124,134,136,139,145,156,157,160,161,164,172,208,227,232,237,241,244,262,266,280,],[104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,]),'assignment1':([50,116,],[115,173,]),'assignment2':([50,116,],[116,116,]),'head_cond':([51,220,],[119,253,]),'return1':([61,],[125,]),'body':([62,119,221,253,275,],[128,175,254,269,281,]),'laRegla2':([68,69,82,83,84,85,],[135,137,146,147,148,149,]),'laRegla':([70,71,79,86,],[138,140,144,150,]),'graphview3':([79,],[142,]),'exp1':([94,],[155,]),'term1':([95,],[159,]),'vcte1':([101,],[163,]),'expression':([104,120,121,134,227,],[167,177,179,191,255,]),'vars3':([111,],[170,]),'head1':([120,],[176,]),'logical':([120,],[178,]),'funCall2':([124,262,],[183,274,]),'body1':([129,188,],[187,240,]),'function4':([151,196,],[195,247,]),'function5':([153,],[198,]),'closeP':([167,],[205,]),'expression1':([168,],[207,]),'loper':([168,],[208,]),'assignment3':([172,],[215,]),'condition1':([175,269,],[219,279,]),'elseif':([175,269,],[220,220,]),'else':([175,269,],[221,221,]),'close_condition':([176,],[225,]),'logical1':([177,],[227,]),'read1':([180,],[231,]),'funCall3':([184,],[236,]),'termina_fun':([195,],[245,]),'graphr1':([234,259,],[260,272,]),'vcte3':([249,],[267,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> PROGRAM ID SEMICOLON declara_vars program2 star','program',6,'p_program','parser.py',18),
  ('program_vars -> vars program_vars','program_vars',2,'p_program_vars','parser.py',32),
  ('program_vars -> empty','program_vars',1,'p_program_vars','parser.py',33),
  ('program2 -> function program2','program2',2,'p_program2','parser.py',42),
  ('program2 -> empty','program2',1,'p_program2','parser.py',43),
  ('star -> starI declara_vars star1 CLOSEBRACES','star',4,'p_star','parser.py',53),
  ('starI -> MULTIPLICATION OPENBRACES','starI',2,'p_starI','parser.py',60),
  ('star1 -> stmt star1','star1',2,'p_star1','parser.py',66),
  ('star1 -> empty','star1',1,'p_star1','parser.py',67),
  ('declara_vars -> vars declara_vars','declara_vars',2,'p_declara_vars','parser.py',73),
  ('declara_vars -> empty','declara_vars',1,'p_declara_vars','parser.py',74),
  ('loop -> while','loop',1,'p_loop','parser.py',84),
  ('loop -> for','loop',1,'p_loop','parser.py',85),
  ('stmt -> assignment','stmt',1,'p_stmt','parser.py',92),
  ('stmt -> condition','stmt',1,'p_stmt','parser.py',93),
  ('stmt -> print','stmt',1,'p_stmt','parser.py',94),
  ('stmt -> loop','stmt',1,'p_stmt','parser.py',95),
  ('stmt -> read','stmt',1,'p_stmt','parser.py',96),
  ('stmt -> graphstmt','stmt',1,'p_stmt','parser.py',97),
  ('stmt -> graphr','stmt',1,'p_stmt','parser.py',98),
  ('stmt -> funCall SEMICOLON','stmt',2,'p_stmt','parser.py',99),
  ('stmt -> return','stmt',1,'p_stmt','parser.py',100),
  ('functionI -> type ID','functionI',2,'p_functionI','parser.py',110),
  ('functionI -> VOID ID','functionI',2,'p_functionI','parser.py',111),
  ('function -> FUN functionI function2 inicia_fun declara_vars function4 termina_fun','function',7,'p_function','parser.py',117),
  ('function1 -> type','function1',1,'p_function1','parser.py',128),
  ('function1 -> VOID','function1',1,'p_function1','parser.py',129),
  ('inicia_fun -> OPENBRACES','inicia_fun',1,'p_inicia_fun','parser.py',136),
  ('termina_fun -> CLOSEBRACES','termina_fun',1,'p_termina_fun','parser.py',142),
  ('function2 -> OPENPAREN function3 CLOSEPAREN','function2',3,'p_function2','parser.py',147),
  ('function3 -> type ID function5','function3',3,'p_function3','parser.py',153),
  ('function3 -> empty','function3',1,'p_function3','parser.py',154),
  ('function4 -> stmt function4','function4',2,'p_function4','parser.py',160),
  ('function4 -> empty','function4',1,'p_function4','parser.py',161),
  ('function5 -> COMMA type ID function3','function5',4,'p_function5','parser.py',170),
  ('fun_vars -> vars fun_vars','fun_vars',2,'p_fun_vars','parser.py',176),
  ('fun_vars -> empty','fun_vars',1,'p_fun_vars','parser.py',177),
  ('vars -> type ID vars1 equals exp SEMICOLON','vars',6,'p_vars','parser.py',193),
  ('vars -> type ID vars1 SEMICOLON','vars',4,'p_vars','parser.py',194),
  ('vars1 -> OPENBRACKET CTEINT CLOSEBRACKET vars3','vars1',4,'p_vars1','parser.py',212),
  ('vars1 -> empty','vars1',1,'p_vars1','parser.py',213),
  ('vars3 -> OPENBRACKET CTEINT CLOSEBRACKET','vars3',3,'p_vars3','parser.py',219),
  ('vars3 -> empty','vars3',1,'p_vars3','parser.py',220),
  ('type -> INT','type',1,'p_type','parser.py',227),
  ('type -> FLOAT','type',1,'p_type','parser.py',228),
  ('type -> CHAR','type',1,'p_type','parser.py',229),
  ('print -> PRINT OPENPAREN expression CLOSEPAREN SEMICOLON','print',5,'p_print','parser.py',237),
  ('read -> READ OPENPAREN id read1 CLOSEPAREN SEMICOLON','read',6,'p_read','parser.py',246),
  ('read1 -> OPENBRACKET exp CLOSEBRACKET OPENBRACKET exp CLOSEBRACKET','read1',6,'p_read1','parser.py',254),
  ('read1 -> OPENBRACKET exp CLOSEBRACKET','read1',3,'p_read1','parser.py',255),
  ('read1 -> empty','read1',1,'p_read1','parser.py',256),
  ('equals -> EQUALS','equals',1,'p_equals','parser.py',261),
  ('id -> ID','id',1,'p_id','parser.py',270),
  ('assignment -> id assignment1 equals assignment3 SEMICOLON','assignment',5,'p_assignment','parser.py',280),
  ('assignment1 -> assignment2','assignment1',1,'p_assignment1','parser.py',288),
  ('assignment1 -> assignment2 assignment1','assignment1',2,'p_assignment1','parser.py',289),
  ('assignment1 -> empty','assignment1',1,'p_assignment1','parser.py',290),
  ('assignment2 -> OPENBRACKET exp CLOSEBRACKET','assignment2',3,'p_assignment2','parser.py',296),
  ('assignment3 -> exp','assignment3',1,'p_assignment3','parser.py',302),
  ('assignment3 -> read','assignment3',1,'p_assignment3','parser.py',303),
  ('vcte -> cte_int','vcte',1,'p_vcte','parser.py',312),
  ('vcte -> cte_float','vcte',1,'p_vcte','parser.py',313),
  ('vcte -> cte_char','vcte',1,'p_vcte','parser.py',314),
  ('vcte -> id vcte1','vcte',2,'p_vcte','parser.py',315),
  ('vcte -> funCall','vcte',1,'p_vcte','parser.py',316),
  ('vcte1 -> OPENBRACKET exp CLOSEBRACKET vcte3','vcte1',4,'p_vcte1','parser.py',325),
  ('vcte1 -> empty','vcte1',1,'p_vcte1','parser.py',326),
  ('vcte3 -> OPENBRACKET exp CLOSEBRACKET','vcte3',3,'p_vcte3','parser.py',332),
  ('vcte3 -> empty','vcte3',1,'p_vcte3','parser.py',333),
  ('cte_int -> CTEINT','cte_int',1,'p_cte_int','parser.py',342),
  ('cte_float -> CTEFLOAT','cte_float',1,'p_cte_float','parser.py',349),
  ('cte_char -> CTECHAR','cte_char',1,'p_cte_char','parser.py',356),
  ('return -> RETURN return1 SEMICOLON','return',3,'p_return','parser.py',366),
  ('return1 -> vcte','return1',1,'p_return1','parser.py',372),
  ('return1 -> exp','return1',1,'p_return1','parser.py',373),
  ('expression -> exp expression1','expression',2,'p_expression','parser.py',381),
  ('expression1 -> loper exp','expression1',2,'p_expression1','parser.py',387),
  ('expression1 -> empty','expression1',1,'p_expression1','parser.py',388),
  ('loper -> GREATER','loper',1,'p_loper','parser.py',398),
  ('loper -> LESS','loper',1,'p_loper','parser.py',399),
  ('loper -> NOTEQUAL','loper',1,'p_loper','parser.py',400),
  ('loper -> ISEQUAL','loper',1,'p_loper','parser.py',401),
  ('logical -> expression logical1 expression','logical',3,'p_logical','parser.py',410),
  ('logical1 -> OR','logical1',1,'p_logical1','parser.py',416),
  ('logical1 -> AND','logical1',1,'p_logical1','parser.py',417),
  ('condition -> IF head_cond body condition1','condition',4,'p_condition','parser.py',424),
  ('condition1 -> elseif head_cond body condition1','condition1',4,'p_condition1','parser.py',432),
  ('condition1 -> else body','condition1',2,'p_condition1','parser.py',433),
  ('condition1 -> empty','condition1',1,'p_condition1','parser.py',434),
  ('elseif -> ELSEIF','elseif',1,'p_elseif','parser.py',441),
  ('else -> ELSE','else',1,'p_else','parser.py',448),
  ('head -> OPENPAREN head1 CLOSEPAREN','head',3,'p_head','parser.py',455),
  ('head_cond -> OPENPAREN head1 close_condition','head_cond',3,'p_head_cond','parser.py',460),
  ('head1 -> expression','head1',1,'p_head1','parser.py',466),
  ('head1 -> logical','head1',1,'p_head1','parser.py',467),
  ('body -> OPENBRACES body1 CLOSEBRACES','body',3,'p_body','parser.py',473),
  ('close_condition -> CLOSEPAREN','close_condition',1,'p_close_condition','parser.py',479),
  ('body1 -> stmt body1','body1',2,'p_body1','parser.py',486),
  ('body1 -> empty','body1',1,'p_body1','parser.py',487),
  ('for -> FOR OPENPAREN ID TWODOTS exp CLOSEPAREN body','for',7,'p_for','parser.py',494),
  ('while -> while1 body','while',2,'p_while','parser.py',501),
  ('while1 -> while_w OPENPAREN expression CLOSEPAREN','while1',4,'p_while1','parser.py',513),
  ('while_w -> WHILE','while_w',1,'p_while_w','parser.py',519),
  ('funCall -> ID OPENPAREN funCall2 CLOSEPAREN','funCall',4,'p_funCall','parser.py',527),
  ('funCall2 -> exp funCall3','funCall2',2,'p_funCall2','parser.py',538),
  ('funCall2 -> empty','funCall2',1,'p_funCall2','parser.py',539),
  ('funCall3 -> COMMA exp funCall2','funCall3',3,'p_funCall3','parser.py',545),
  ('funCall3 -> empty','funCall3',1,'p_funCall3','parser.py',546),
  ('laRegla -> OPENPAREN exp COMMA exp CLOSEPAREN','laRegla',5,'p_laRegla','parser.py',552),
  ('laRegla2 -> OPENPAREN exp CLOSEPAREN','laRegla2',3,'p_laRegla2','parser.py',558),
  ('graphstmt -> graphfig','graphstmt',1,'p_graphstmt','parser.py',565),
  ('graphstmt -> graphview','graphstmt',1,'p_graphstmt','parser.py',566),
  ('graphstmt -> graphmove','graphstmt',1,'p_graphstmt','parser.py',567),
  ('graphfig -> graphfig1 SEMICOLON','graphfig',2,'p_graphfig','parser.py',575),
  ('graphfig1 -> CIRCLE laRegla2','graphfig1',2,'p_graphfig1','parser.py',581),
  ('graphfig1 -> SQUARE laRegla2','graphfig1',2,'p_graphfig1','parser.py',582),
  ('graphfig1 -> TRIANGLE laRegla','graphfig1',2,'p_graphfig1','parser.py',583),
  ('graphfig1 -> RECTANGLE laRegla','graphfig1',2,'p_graphfig1','parser.py',584),
  ('graphmove -> graphmove1 SEMICOLON','graphmove',2,'p_graphmove','parser.py',592),
  ('graphmove1 -> HAND_DOWN','graphmove1',1,'p_graphmove1','parser.py',598),
  ('graphmove1 -> HAND_UP','graphmove1',1,'p_graphmove1','parser.py',599),
  ('graphmove1 -> graphmove2','graphmove1',1,'p_graphmove1','parser.py',600),
  ('graphmove2 -> GO laRegla2','graphmove2',2,'p_graphmove2','parser.py',606),
  ('graphmove2 -> LEFT laRegla2','graphmove2',2,'p_graphmove2','parser.py',607),
  ('graphmove2 -> RIGHT laRegla2','graphmove2',2,'p_graphmove2','parser.py',608),
  ('graphmove2 -> BACK laRegla2','graphmove2',2,'p_graphmove2','parser.py',609),
  ('graphmove2 -> ARC laRegla','graphmove2',2,'p_graphmove2','parser.py',610),
  ('graphr -> REPEAT exp OPENBRACES graphstmt graphr1 CLOSEBRACES','graphr',6,'p_graphr','parser.py',618),
  ('graphr1 -> graphstmt graphr1','graphr1',2,'p_graphr1','parser.py',624),
  ('graphr1 -> empty','graphr1',1,'p_graphr1','parser.py',625),
  ('graphview -> graphview1 SEMICOLON','graphview',2,'p_graphview','parser.py',633),
  ('graphview1 -> HIDE_STAR','graphview1',1,'p_graphview1','parser.py',639),
  ('graphview1 -> SHOW_STAR','graphview1',1,'p_graphview1','parser.py',640),
  ('graphview1 -> graphview2 exp','graphview1',2,'p_graphview1','parser.py',641),
  ('graphview2 -> SETXY graphview3','graphview2',2,'p_graphview2','parser.py',647),
  ('graphview2 -> COLOR_STAR','graphview2',1,'p_graphview2','parser.py',648),
  ('graphview2 -> SIZE_STAR','graphview2',1,'p_graphview2','parser.py',649),
  ('graphview3 -> exp COMMA','graphview3',2,'p_graphview3','parser.py',655),
  ('graphview3 -> laRegla','graphview3',1,'p_graphview3','parser.py',656),
  ('exp -> term exp1','exp',2,'p_exp','parser.py',664),
  ('exp1 -> ADDITION exp','exp1',2,'p_exp1','parser.py',672),
  ('exp1 -> SUBSTRACTION exp','exp1',2,'p_exp1','parser.py',673),
  ('exp1 -> empty','exp1',1,'p_exp1','parser.py',674),
  ('openP -> OPENPAREN','openP',1,'p_openP','parser.py',684),
  ('closeP -> CLOSEPAREN','closeP',1,'p_closeP','parser.py',692),
  ('factor -> vcte','factor',1,'p_factor','parser.py',702),
  ('factor -> factor1','factor',1,'p_factor','parser.py',703),
  ('factor1 -> factor2 vcte','factor1',2,'p_factor1','parser.py',709),
  ('factor1 -> openP expression closeP','factor1',3,'p_factor1','parser.py',710),
  ('factor2 -> ADDITION','factor2',1,'p_factor2','parser.py',716),
  ('factor2 -> SUBSTRACTION','factor2',1,'p_factor2','parser.py',717),
  ('term -> factor term1','term',2,'p_term','parser.py',728),
  ('term1 -> MULTIPLICATION term','term1',2,'p_term1','parser.py',737),
  ('term1 -> DIVISION term','term1',2,'p_term1','parser.py',738),
  ('term1 -> empty','term1',1,'p_term1','parser.py',739),
  ('empty -> <empty>','empty',0,'p_empty','parser.py',749),
]
